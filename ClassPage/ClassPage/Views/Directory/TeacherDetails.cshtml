@model TeacherDTO

@{
    ViewData["Title"] = $"Teacher details - {Model.FirstName} {Model.LastName}";
}

<h1>Teacher details: @Model.FirstName @Model.LastName</h1>
<br />

<div>
    <p>First name: <b>@Model.FirstName</b></p>
    @if (Model.MiddleName != null)
    {
        <p>Middle name: <b>@Model.MiddleName</b></p>
    }
    <p>Last name: <b>@Model.LastName</b></p>

    <p>
        Subjects: <b>@string.Join(", ", (ViewBag.SubjectList as ICollection<Subject>).Where(s => Model.SubjectIds.Contains(s.Id)).Select(s => s.SubjectName))</b>
    </p>

    @if (Model.MainClassId != null)
    {
        <p>
            Main teacher of class:
            <b>
                @Html.ActionLink((ViewBag.ClassList as ICollection<Class>).FirstOrDefault(c => c.Id == Model.MainClassId).ClassName, "ClassDetails", "Directory", new { id = Model.MainClassId })
            </b>
        </p>
    }
</div>
<br />

<div>
    <p>Contact information:</p>
    <p>E-mail address: <a href="mailto:@Model.Email">@Model.Email</a></p>
    <p>Telephone number: +359 @Model.Phone</p>
</div>

<br />

<div>
    <p>Teaches classes:</p>

    @foreach (Class c in (ViewBag.ClassList as ICollection<Class>).Where(c => Model.ClassIds.Contains(c.Id)))
    {
        <p>
            @Html.ActionLink(c.ClassName, "ClassDetails", "Directory", new { id = c.Id })
        </p>
    }
</div>
@if (User.HasClaim("Role", "Admin"))
{
    <div>
        @Html.ActionLink("Edit teacher information", "EditTeacher", "Admin", new { id = Model.Id }, new { @class = "btn btn-warning" })
        @Html.ActionLink("Delete teacher", "DeleteTeacher", "Admin", new { id = Model.Id }, new { @class = "btn btn-danger" })
    </div>
}